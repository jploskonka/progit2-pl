[[_remote_branches]]
=== Gałęzie zdalne

(((branches, remote)))(((references, remote)))
Zdalne gałęzie są odnośnikami do stanu gałęzi w zdalnym repozytorium. Są to lokalne gałęzie, których nie można zmieniać; są one modyfikowane automatycznie za każdym razem, kiedy wykonujesz jakieś operacje zdalne. Zdalne gałęzie zachowują się jak zakładki przypominające ci, gdzie znajdowały się gałęzie w twoim zdalnym repozytorium ostatnim razem, kiedy się z nim łączyłeś.

Ich nazwy przybierają następującą formę: `(nazwa zdalnego repozytorium)/(nazwa gałęzi)`. Na przykład, gdybyś chciał zobaczyć, jak wygląda gałąź master w zdalnym repozytorium `origin` z chwili, kiedy po raz ostatni się z nim komunikowałeś, musiałbyś sprawdzić gałąź `origin/master`. Jeśli na przykład pracowałeś nad zmianą wraz z partnerem który wypchnął gałąź `iss53`, możesz mieć lokalną gałąź `iss53`, ale gałąź na serwerze będzie wskazywała rewizję znajdującą się pod `origin/iss53`.

Może być to nieco mylące, więc przyjrzyjmy się dokładniej przykładowi. Powiedzmy, że w swojej sieci masz serwer Git pod adresem `git.ourcompany.com`. Po sklonowaniu z niego repozytorium, Git automatycznie nazwie je jako `origin`, pobierze wszystkie dane, stworzy wskaźnik do miejsca gdzie znajduje się gałąź `master` i nazwie ją lokalnie `origin/master`; nie będziesz mógł jej przesuwać. Git da ci także do pracy Twoją własną gałąź `master` zaczynającą się w tym samym miejscu, co zdalna (zobacz Rysunek 3-22).

[NOTE]
.``origin'' nie jest w żaden sposób specjalne.
====
Tak samo jak nazwa gałęzi ``master'' nie ma żadnego specjalnego znaczenia w Gicie, ``origin'' również nie jest w żaden
sposób magiczne. ``master'' jest domyślną nazwą pierwszej gałęzi kiedy używasz komendy `git init` i tylko dlatego jest
powszechnie używane, tak samo ``origin'' jest domyślną nazwą zdalnego repozytorium kiedy użyjesz `git clone`. Jeśli
użujesz `git clone -o booyah` wtedy Twoją domyślną zdalną gałęzią będzie `booyah/master`.(((origin)))
====

.Po sklonowaniu otrzymasz własną gałąź główną oraz zdalną origin/master wskazującą na gałąź w zdalnym repozytorium.
image::images/remote-branches-1.png[Server and local repositories after cloning.]

Jeśli wykonasz jakąś pracę na gałęzi głównej, a w międzyczasie ktoś inny wypchnie zmiany na `git.ourcompany.com` i zaktualizuje jego gałąź główną, wówczas wasze historie przesuną się do przodu w różny sposób. Co więcej, dopóki nie skontaktujesz się z serwerem zdalnym, Twój wskaźnik `origin/master` nie przesunie się (Rysunek 3-23).

.Kiedy pracujesz lokalnie, wypchnięcie przez kogoś zmian na serwer powoduje, że obie historie zaczynają przesuwać się do przodu w odmienny sposób.
image::images/remote-branches-2.png[Local and remote work can diverge.]

Aby zsynchronizować zmiany uruchom polecenie `git fetch origin`. Polecenie to zajrzy na serwer, na który wskazuje nazwa origin (w tym wypadku `git.ourcompany.com`), pobierze z niego wszystkie dane, których jeszcze nie masz u siebie, i zaktualizuje Twoją lokalną bazę danych przesuwając jednocześnie wskaźnik `origin/master` do nowej, aktualniejszej pozycji (zobacz Rysunek 3-24).

.Polecenie `git fetch` aktualizuje zdalne referencje.
image::images/remote-branches-3.png[`git fetch` updates your remote references.]

Aby zaprezentować fakt posiadania kilku zdalnych serwerów oraz stan ich zdalnych gałęzi, załóżmy, że posiadasz jeszcze jeden firmowy serwer Git, który jest używany wyłącznie przez jeden z twoich zespołów sprintowych. Jest to serwer dostępny pod adresem `git.team1.ourcompany.com`. Możesz go dodać do projektu, nad którym pracujesz, jako nowy zdalny odnośnik uruchamiając polecenie `git remote add` tak, jak pokazaliśmy to w <<_git_basics_chapter>>. Nazwij go `teamone`, dzięki czemu później będziesz używał tej nazwy zamiast pełnego adresu URL.

.Dodanie kolejnego zdalnego serwera.
image::images/remote-branches-4.png[Adding another server as a remote.]

Możesz teraz uruchomić polecenie `git fetch teamone` aby pobrać wszystko, co znajduje się na serwerze, a czego jeszcze nie posiadasz lokalnie. Ponieważ serwer ten zawiera podzbiór danych które zawiera serwer `origin`, Git nie pobiera niczego ale tworzy zdalną gałąź `teamone/master` wskazującą na rewizję dostępną w repozytorium `teamone` i jej gałęzi `master`.

.Lokalny odnośnik do gałęzi `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]

[[_pushing_branches]]
==== Wypychanie zmian

(((pushing)))
Jeśli chcesz podzielić się swoją gałęzią ze światem, musisz wypchnąć zmiany na zdalny serwer, na którym posiadasz prawa zapisu. twoje lokalne gałęzie nie są automatycznie synchronizowane z serwerem, na którym zapisujesz - musisz jawnie określić gałęzie, których zmianami chcesz się podzielić. W ten sposób możesz używać prywatnych gałęzi do pracy, której nie chcesz dzielić, i wypychać jedynie gałęzie tematyczne, w ramach których współpracujesz.

Jeśli posiadasz gałąź o nazwie `serverfix`, w której chcesz współpracować z innymi, możesz wypchnąć swoje zmiany w taki sam sposób jak wypychałeś je w przypadku pierwszej gałęzi. Uruchom `git push (nazwa zdalnego repozytorium) (nazwa gałęzi)`:

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

Posłużyłem się pewnym skrótem. Git automatycznie sam rozwija nazwę `serverfix` do pełnej `refs/heads/serverfix:refs/heads/serverfix`, co oznacza "Weź moją lokalną gałąź serverfix i wypchnij zmiany, aktualizując zdalną gałąź serverfix". Zajmiemy się szczegółowo częścią `refs/heads/` w rozdziale 9, ale ogólnie nie powinieneś się tym przejmować. Możesz także wykonać `git push origin serverfix:serverfix` co przyniesie ten sam efekt - dla Gita znaczy to "Weź moją gałąź serverfix i uaktualnij nią zdalną gałąź serverfix". Możesz używać tego formatu do wypychania lokalnych gałęzi do zdalnych o innej nazwie. Gdybyś nie chciał żeby gałąź na serwerze nazywała się `serverfix` mógłbyś uruchomić polecenie w formie `git push origin serverfix:innanazwagałęzi` co spowodowałoby wypchnięcie gałęzi `serverfix` do `innanazwagałęzi` w zdalnym repozytorium.

[NOTE]
.Nie wpisuj hasła za każdym razem
====
Jeśli używasz linków HTTPS do wypychania swoich zmian, serwer Gita przy każdej operacji zapyta Cię o nazwę użytkownika
oraz hasła w celu autentykacji. Domyślnie zostaniesz poproszony o podanie tych danych w terminalu, aby serwer mógł
stwierdzić czy faktycznie masz uprawnienia do wypchania zmian.

Jeśli nie chcesz wpisywać tych danych za każdym razem możesz ustawić ``credential cache''. (TODO: pamięć podręczną
certyfikatów o_O?) Najprostsze jest po prostu zapisanie tych danych w pamięci na kilka minut, możesz to łatwo ustawić
używając `git config --global credential.helper cache`.

Aby dowiedzieć się więcej na temat róznych rodzajów przechowywania certyfikatów w pamięci podręcznej (:D :D :D) zobacz
<<_credential_caching>>.
====

Następnym razem kiedy twoi współpracownicy pobiorą dane z serwera, uzyskają referencję do miejsca, w którym została zapisana Twoja wersja `serverfix` pod zdalną gałęzią `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

Warto zauważyć, że kiedy podczas pobierania ściągasz nową, zdalną gałąź, nie uzyskujesz automatycznie lokalnej, edytowalnej jej wersji. Inaczej mówiąc, w tym przypadku, nie masz nowej gałęzi `serverfix` na której możesz do razu pracować - masz jedynie wskaźnik `origin/serverfix` którego nie można modyfikować.

Aby scalić pobraną pracę z bieżącą gałęzią roboczą uruchom polecenie `git merge origin/serverfix`. Jeśli potrzebujesz własnej gałęzi `serverfix` na której będziesz mógł pracować dalej, możesz ją stworzyć bazując na zdalnej gałęzi w następujący sposób:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Otrzymasz lokalną gałąź, w której będziesz mógł rozpocząć pracę od momentu, w którym znajduje się ona w zdalnej gałązi `origin/serverfix`.

[[_tracking_branches]]
==== Gałęzie śledzące

(((branches, tracking)))(((branches, upstream)))
Przełączenie do lokalnej gałęzi ze zdalnej automatycznie tworzy coś, co określa się jako _gałąź śledzącą_. Gałęzie śledzące są gałęziami lokalnymi, które posiadają bezpośrednią relację z gałęzią zdalną. Jeśli znajdujesz się w gałęzi śledzącej, po wpisaniu `git push` Git automatycznie wie, na który serwer wypchnąć zmiany. Podobnie uruchomienie `git pull` w jednej z takich gałęzi pobiera wszystkie dane i odnośniki ze zdalnego repozytorium i automatycznie scala zmiany z gałęzi zdalnej do odpowiedniej gałęzi zdalnej.

Po sklonowaniu repozytorium automatycznie tworzona jest gałąź `master`, która śledzi `origin/master`. Z tego właśnie powodu polecenia `git push` i `git pull` działają od razu, bez dodatkowych argumentów. Jednakże, możesz skonfigurować inne gałęzie tak, żeby śledziły zdalne odpowiedniki. Prosty przypadek to przywołany już wcześniej przykład polecenia `git checkout -b [gałąź] [nazwa zdalnego repozytorium]/[gałąź]`. Jeśli pracujesz z Gitem nowszym niż 1.6.2, możesz także użyć skrótu `--track`:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Żeby skonfigurować lokalną gałąź z inną nazwą niż zdalna, możesz korzystać z pierwszej wersji polecenia podając własną nazwę:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Teraz Twoja lokalna gałąź sf będzie pozawalała na automatyczne wypychanie zmian jak i ich pobieranie z origin/serverfix.

Jeśli już masz gałąź lokalną i chcesz powiązać ja z gałęzią zdalną, którą właśnie pobrałeś, lub chcesz zmienić śledzoną
gałąź możesz użyć przełącznika `-u` lub `--set-upstream-to` komendy `git branch`.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Upstream shorthand(TODO)
====
Jeśli masz ustawioną gałąź śledzącą możesz użyć jej przez skrót `@{upstream}` lub `@{u}`. Więc jesli jesteś na gałęzi
`master`, która jest ustawiona żeby śledzić gałąź `origin/master`, możesz używać komend w stylu `git merge @{u}` zamiast
`git merge origin/master` jeśli masz taką ochotę.(((+++@{u}+++)))(((+++@{upstream}+++)))
====

Jeśli chcesz zobaczyć jakie śledzące gałęzie masz ustawione, możesz użyć przełącznika `-vv` komendy `git branch`.
Wypisze ona wszystkie Twoje lokalne gałęzie podając więcej informacji na ich temat - w tym informację o gałęziach
śledzących oraz czy Twoja gałąź jest w tym samym miejscu co zdalna gałąź.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

Tutaj możesz dowiedzieć się, że gałąź `iss53` śledzi zdalną gałąź `origin/iss53` i jest do przodu (??) (``ahead'') o
dwie rewizje. To znaczy, że lokalnie posiadasz 2 rewizje, które nie są dostępne na serwerze. Możesz też zobaczyć, że
gałąź `master` śledzi gałąź `origin/master` i aktualna. Następnie możesz zobaczyć, że gałąź `serverfix` śledzi gałąź
`server-fix-good` na serwerze `teamone` i jest o 3 rewizje do przodu oraz o 1 do tyłu co znaczy, że na serwerze znajduje
się jedna rewizja, która nie jest scalona z lokalnymi zmianami oraz trzy rewizje lokalnie, które nie zostały wypchane na
serwer. I w końcu możesz zobaczyć, że lokalna gałąź `testing` nie śledzi żadnej gałęzi zdalnej.

Należy tutaj zauważyć, że liczby te są podawane względem momentu kiedy ostatni raz pobrałeś dane z serwera. Komenda ta
nie łączy się z serwerem, podaje tylko stan bazując na danych zapisanych lokalnie. Jeśli chcesz całkiem aktualne dane na
temat rewizji do przodu/do tyłu musisz pobrać informację na temat każdego zdalnego serwera tuż przed sprawdzeniem stanu
gałęzi. Możesz to zrobić w następujący sposób: `$ git fetch --all; git branch -vv`

==== Pobieranie

(((pulling)))
O ile komenda `git fetch` pobierze wszystkie zmiany znajdujące się na serwerze, ale nie w Twoim lokalnym repozytorium,
tak nie zmodyfikuje ona w żaden sposób stanu projektu w Twoim katalogu.
Pobierze ona tylko dane i pozwoli Ci scalić je samemu.
Istnieje jednak komenda `git pull`, która tak naprawdę jest tym samym co wykonanie komend `git fetch`, a następnie od
razu `git merge` (w większości przypadków oczywiście).
Jeśli masz gałęzie ustawione w sposób zademonstrowany w ostatniej sekcji, czy to przez wyraźne ustawienie ich czy też
poprzez użycie komend `clone` lub `checkout`, `git pull` znajdzie serwer oraz gałąź, z których powinien pobrać zmiany,
pobierze dane oraz spróbuje scalić zdalną gałąź z Twoją lokalną.

Zazwyczaj lepiej jest jednak użyć komend `git fetch` oraz `git merge` dosłownie, magia komendy `git pull` czasami może
być myląca.

[[_delete_branches]]
==== Usuwanie zdalnych gałęzi

(((branches, deleting remote)))
Załóżmy, że skończyłeś pracę ze zdalną gałęzią - powiedzmy, że ty i twoi współpracownicy zakończyliście pracę nad nową funkcją i scaliliście zmiany ze zdalną gałęzią główną `master` (czy gdziekolwiek indziej, gdzie znajduje się stabilna wersja kodu). Możesz usunąć zdalną gałąź używając raczej niezbyt intuicyjnej składni `git push [nazwa zdalnego repozytorium] :[gałąź]`. Aby np. usunąć z serwera gałąź `serverfix` uruchom polecenie:
[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

Wszystko co ta komenda robi to usunięcie wskaźnika do zmian z serwera. Git zazwyczaj będzie jeszcze pamiętał Twoje
zmiany zanim proces zbierania śmieci (TODO: to raczej nie powinno być po polsku) zostanie rozpoczęty, więc jeśli
usunąłeś gałąź przez przypadek zazwyczaj da się ją łatwo odzyskać.
